package com.hiya.dp.structrue.proxy.statics;

import com.hiya.dp.structrue.proxy.IGame;

/**
 * 在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。
在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。
意图：为其他对象提供一种代理以控制对这个对象的访问。
主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。
应用实例： 1、Windows 里面的快捷方式。 2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 3、买火车票不一定在火车站买，也可以去代售点。 4、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。 5、spring aop。 
和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制或者增强。
 * @author zjq
 *
 */
public class StaticsProxyClient
{
    public static void main(String[] args)
    {
        //使用 ProxyGame 来获取对象
        IGame fightGame = new ProxyFightGame("天天炫斗");
        //图像将无法从磁盘加载,限制 了 功能
        fightGame.play();  
        
        
        //使用 ProxyGame 来获取对象
        IGame gunGame = new ProxyFightGame("天天炫斗");
        gunGame.play();  
        
        
        //使用 ProxyGame 来获取对象
        IGame motorGame = new ProxyMotorGame("天天炫斗");
        motorGame.play();  
        
    }
}
